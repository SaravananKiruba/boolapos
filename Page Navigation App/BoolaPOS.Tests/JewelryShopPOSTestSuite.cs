using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace Tests
{
    [TestClass]
    public class JewelryShopPOSTestSuite
    {
        [TestMethod]
        public void RunAllWorkflowTests()
        {
            Console.WriteLine("============================================");
            Console.WriteLine("JEWELRY SHOP POS SYSTEM - AUTOMATED TESTING");
            Console.WriteLine("============================================");
            
            // Phase 1 ‚Äì Core Operations
            Console.WriteLine("\nüìå PHASE 1 ‚Äì CORE OPERATIONS");
            
            Console.WriteLine("\nüîÅ Workflow 1: Add New Customer ‚Üí Make a Sale");
            RunWorkflow1Tests();
            
            Console.WriteLine("\nüîÅ Workflow 2: Stock Entry ‚Üí Inventory Ledger Update");
            RunWorkflow2Tests();

            // Phase 2 ‚Äì Repairs, Purchase, Financials
            Console.WriteLine("\nüìå PHASE 2 ‚Äì REPAIRS, PURCHASE, FINANCIALS");
            
            Console.WriteLine("\nüîÅ Workflow 3: Create Repair Job ‚Üí Track Status ‚Üí Complete");
            RunWorkflow3Tests();
            
            Console.WriteLine("\nüîÅ Workflow 4: Vendor Purchase ‚Üí Inventory Update");
            RunWorkflow4Tests();
            
            Console.WriteLine("\nüîÅ Workflow 5: Day Start ‚Üí Transactions ‚Üí Day Close");
            RunWorkflow5Tests();

            // Phase 3 ‚Äì Reports, Dashboard, Communication
            Console.WriteLine("\nüìå PHASE 3 ‚Äì REPORTS, DASHBOARD, COMMUNICATION");
            
            Console.WriteLine("\nüîÅ Workflow 6: View Dashboard ‚Üí Download Reports");
            RunWorkflow6Tests();
            
            Console.WriteLine("\nüîÅ Workflow 7: Print Custom Invoice");
            RunWorkflow7Tests();
            
            Console.WriteLine("\n============================================");
            Console.WriteLine("ALL AUTOMATED TESTS COMPLETED SUCCESSFULLY");
            Console.WriteLine("============================================");
        }

        private void RunWorkflow1Tests()
        {
            var testClass = new Workflow1_CustomerSaleTests();
            try
            {
                testClass.TestInitialize();
                
                Console.WriteLine("‚úì Testing: Add Customer");
                testClass.AddCustomer_ShouldCreateNewCustomer().Wait();
                
                Console.WriteLine("‚úì Testing: Add Product to Inventory");
                testClass.AddProductToInventory_ShouldCreateNewProduct().Wait();
                
                Console.WriteLine("‚úì Testing: Create Order with Customer and Product");
                testClass.CreateOrder_WithSelectedCustomerAndProduct_ShouldCreateOrder().Wait();
                
                Console.WriteLine("‚úÖ All Workflow 1 tests passed successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Test failed: {ex.Message}");
                throw;
            }
            finally
            {
                testClass.TestCleanup();
            }
        }

        private void RunWorkflow2Tests()
        {
            var testClass = new Workflow2_InventoryLedgerTests();
            try
            {
                testClass.TestInitialize();
                
                Console.WriteLine("‚úì Testing: Add Gold Item to Inventory");
                testClass.AddGoldItemToInventory_ShouldBeVisibleInStockList().Wait();
                
                Console.WriteLine("‚úì Testing: Perform Sale - Reduce Inventory");
                testClass.PerformSale_ShouldReduceInventoryInRealTime().Wait();
                
                Console.WriteLine("‚úì Testing: Exchange Product - Update Ledger");
                testClass.ExchangeProduct_ShouldUpdateLedgerCorrectly().Wait();
                
                Console.WriteLine("‚úÖ All Workflow 2 tests passed successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Test failed: {ex.Message}");
                throw;
            }
            finally
            {
                testClass.TestCleanup();
            }
        }

        private void RunWorkflow3Tests()
        {
            var testClass = new Workflow3_RepairJobTests();
            try
            {
                testClass.TestInitialize();
                
                Console.WriteLine("‚úì Testing: Create Repair Job");
                testClass.CreateRepairJob_ShouldRegisterNewJob().Wait();
                
                Console.WriteLine("‚úì Testing: Update Repair Job Status");
                testClass.UpdateRepairJobStatus_ShouldChangeStatus().Wait();
                
                Console.WriteLine("‚úì Testing: Send Repair Completion Notification");
                testClass.SendNotification_WhenRepairCompleted_ShouldRecordNotification().Wait();
                
                Console.WriteLine("‚úì Testing: View Customer Repair History");
                testClass.ViewRepairJobHistory_ForCustomer_ShouldReturnAllJobs().Wait();
                
                Console.WriteLine("‚úÖ All Workflow 3 tests passed successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Test failed: {ex.Message}");
                throw;
            }
            finally
            {
                testClass.TestCleanup();
            }
        }

        private void RunWorkflow4Tests()
        {
            var testClass = new Workflow4_VendorPurchaseTests();
            try
            {
                testClass.TestInitialize();
                
                Console.WriteLine("‚úì Testing: Add Vendor with GST");
                testClass.AddVendorWithGST_ShouldCreateSupplier().Wait();
                
                Console.WriteLine("‚úì Testing: Create Purchase Entry");
                testClass.CreatePurchaseEntry_ShouldRecordPurchaseAndUpdateInventory().Wait();
                
                Console.WriteLine("‚úì Testing: Check Vendor Payment History");
                testClass.CheckVendorPaymentHistory_ShouldReturnAllPayments().Wait();
                
                Console.WriteLine("‚úÖ All Workflow 4 tests passed successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Test failed: {ex.Message}");
                throw;
            }
            finally
            {
                testClass.TestCleanup();
            }
        }

        private void RunWorkflow5Tests()
        {
            var testClass = new Workflow5_DayStartCloseTests();
            try
            {
                testClass.TestInitialize();
                
                Console.WriteLine("‚úì Testing: Open Daily Cash Register");
                testClass.OpenDailyCashRegister_ShouldRecordOpeningBalance().Wait();
                
                Console.WriteLine("‚úì Testing: Record Multiple Transactions");
                testClass.RecordMultipleTransactions_ShouldUpdateFinancialRecords().Wait();
                
                Console.WriteLine("‚úì Testing: Close Day Operation");
                testClass.CloseDayOperation_ShouldCalculateAndRecordClosingBalance().Wait();
                
                Console.WriteLine("‚úì Testing: Print Cash Register Summary");
                testClass.PrintCashRegisterSummary_ShouldProvideAccurateReport().Wait();
                
                Console.WriteLine("‚úÖ All Workflow 5 tests passed successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Test failed: {ex.Message}");
                throw;
            }
            finally
            {
                testClass.TestCleanup();
            }
        }

        private void RunWorkflow6Tests()
        {
            var testClass = new Workflow6_DashboardReportsTests();
            try
            {
                testClass.TestInitialize();
                
                Console.WriteLine("‚úì Testing: View Dashboard");
                testClass.ViewDashboard_ShouldShowCorrectTotals().Wait();
                
                Console.WriteLine("‚úì Testing: Export Sales Report");
                testClass.ExportSalesReport_ShouldIncludeAllSales().Wait();
                
                Console.WriteLine("‚úì Testing: Export Customer Purchase History");
                testClass.ExportCustomerPurchaseHistory_ShouldShowCustomerOrders().Wait();
                
                Console.WriteLine("‚úì Testing: Export GST Summary");
                testClass.ExportGSTSummary_ShouldCalculateCorrectTaxes().Wait();
                
                Console.WriteLine("‚úÖ All Workflow 6 tests passed successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Test failed: {ex.Message}");
                throw;
            }
            finally
            {
                testClass.TestCleanup();
            }
        }

        private void RunWorkflow7Tests()
        {
            var testClass = new Workflow7_CustomInvoiceTests();
            try
            {
                testClass.TestInitialize();
                
                Console.WriteLine("‚úì Testing: Generate Invoice");
                testClass.GenerateInvoice_ShouldContainCorrectOrderDetails().Wait();
                
                Console.WriteLine("‚úì Testing: Verify Invoice GST Details");
                testClass.VerifyInvoiceDetails_ShouldIncludeGSTDetails().Wait();
                
                Console.WriteLine("‚úì Testing: Print Invoice with Formatting");
                testClass.PrintInvoice_ShouldFormatCurrencyAndWeightCorrectly().Wait();
                
                Console.WriteLine("‚úÖ All Workflow 7 tests passed successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Test failed: {ex.Message}");
                throw;
            }
            finally
            {
                testClass.TestCleanup();
            }
        }
    }
}