// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Page_Navigation_App.Data;

#nullable disable

namespace Page_Navigation_App.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.36");

            modelBuilder.Entity("Page_Navigation_App.Model.AuditLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityID")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NewValues")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValues")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserID")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.BusinessInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("BusinessName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("BusinessInfo");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DefaultMakingCharges")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("DefaultWastage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayOrder")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BangleSize")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ChainLength")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfAnniversary")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyDetails")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("GSTNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGoldSchemeEnrolled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastPurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyRateChanges")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("OutstandingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferredDesigns")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferredMetalType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RingSize")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalPurchases")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WhatsAppNumber")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.EmailSettings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderName")
                        .HasColumnType("TEXT");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SmtpServer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EmailSettings");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Finance", b =>
                {
                    b.Property<string>("FinanceID")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CGSTAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExchangeMetalPurity")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExchangeMetalType")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ExchangeMetalWeight")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ExchangeValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("GSTNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("HallmarkNumber")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("IGSTAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("InstallmentAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MakingCharges")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetalPurity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MetalRate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetalType")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MetalWeight")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextInstallmentDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfInstallments")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderReference")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentMode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("RemainingAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SGSTAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SchemeCollectedGrams")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SchemeMaturityBonus")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SchemeMaturityDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SchemeMonthlyAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchemeStatus")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SchemeTargetGrams")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SchemeTenureMonths")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("StoneValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SupplierName")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionType")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("WastagePercentage")
                        .HasColumnType("TEXT");

                    b.HasKey("FinanceID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Finances");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.LogEntry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Component")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Duration")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ExceptionDetails")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StackTrace")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserID")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.NotificationLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Channel")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Recipient")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("NotificationLog");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.NotificationSettings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableEmailNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableSMS")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableWhatsApp")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SendAnniversaryWishes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SendBirthdayWishes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SendOrderConfirmations")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SendPaymentReminders")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SendRepairUpdates")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EMIAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("EMIMonths")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ExchangeMetalPurity")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExchangeMetalType")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ExchangeMetalWeight")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ExchangeValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("GSTNumber")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasMetalExchange")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BaseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CGSTAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GrossWeight")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("HallmarkNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("HallmarkingCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("IGSTAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MakingCharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MetalRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetWeight")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SGSTAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("StoneDetails")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StoneValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StoneWeight")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("TaxableAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValueAdditionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValueAdditionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("WastageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WastagePercentage")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Collection")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Design")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GrossWeight")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("HallmarkNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCustomOrder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeadStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MakingCharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MetalType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NetWeight")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Purity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StoneDetails")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StoneValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StoneWeight")
                        .HasColumnType("decimal(10,3)");

                    b.Property<int?>("SubcategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SupplierID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ValueAdditionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("WastagePercentage")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("SubcategoryID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.RateMaster", b =>
                {
                    b.Property<int>("RateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DefaultGst")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HallmarkingCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSpecialRate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MarketSource")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetalType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PurchaseRate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Purity")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SaleRate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("TEXT");

                    b.HasKey("RateID");

                    b.ToTable("RateMaster");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.RepairJob", b =>
                {
                    b.Property<int>("RepairJobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AdditionalMetalWeight")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EstimatedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHallmarkRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("JobNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MakingCharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MetalRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MetalType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("NewHallmark")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("OldHallmark")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PromisedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Purity")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("QualityChecks")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SMSNotificationSent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("StoneDetails")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StoneWeight")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(10,3)");

                    b.Property<bool>("WhatsAppNotificationSent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkmanRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("RepairJobID");

                    b.HasIndex("CustomerId");

                    b.ToTable("RepairJobs");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.SecurityLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Module")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Severity")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("SecurityLogs");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Setting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoBackup")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BackupFrequencyDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackupPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DarkMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LowStockAlerts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LowStockThreshold")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OrderNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PaymentReminders")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Stock", b =>
                {
                    b.Property<int>("StockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeadStock")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastSold")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,3)");

                    b.HasKey("StockID");

                    b.HasIndex("ProductID");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Subcategory", b =>
                {
                    b.Property<int>("SubcategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayOrder")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("SpecialMakingCharges")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("SpecialWastage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("SubcategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("SubcategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("GSTNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IFSCCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastPurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("WhatsAppNumber")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserRoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Finance", b =>
                {
                    b.HasOne("Page_Navigation_App.Model.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Page_Navigation_App.Model.Order", null)
                        .WithMany("Payments")
                        .HasForeignKey("OrderID");

                    b.HasOne("Page_Navigation_App.Model.Supplier", null)
                        .WithMany("Payments")
                        .HasForeignKey("SupplierID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Order", b =>
                {
                    b.HasOne("Page_Navigation_App.Model.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.OrderDetail", b =>
                {
                    b.HasOne("Page_Navigation_App.Model.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Page_Navigation_App.Model.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Product", b =>
                {
                    b.HasOne("Page_Navigation_App.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Page_Navigation_App.Model.Subcategory", "Subcategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryID");

                    b.HasOne("Page_Navigation_App.Model.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Subcategory");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.RepairJob", b =>
                {
                    b.HasOne("Page_Navigation_App.Model.Customer", "Customer")
                        .WithMany("RepairJobs")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Role", b =>
                {
                    b.HasOne("Page_Navigation_App.Model.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Stock", b =>
                {
                    b.HasOne("Page_Navigation_App.Model.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Subcategory", b =>
                {
                    b.HasOne("Page_Navigation_App.Model.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.UserRole", b =>
                {
                    b.HasOne("Page_Navigation_App.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("RepairJobs");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Subcategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.Supplier", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Page_Navigation_App.Model.User", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
